tail(gdp2[rowSums(gdp2$CountryCode=" ")==0,])
tail(gdp2[rowSums(gdp2$CountryCode==" ")==0,])
tail(gdp2[rowSums(gdp2$CountryCode)=="",])
tail(gdp2[rowSums(gdp2)=="",])
tail(gdp2[rowSums(gdp2==""),])
tail(gdp2[rowSums(gdp2==" "),])
tail(gdp2[X!=""])
tail(gdp2[gdp2!=""])
tail(gdp2[CountryCode!=""])
tail(gdp2[gdp2$CountryCode!=""])
tail(gdp2[gdp2$CountryCode!="",])
View(gdp2)
head(gdp2 <- gdp[gdp$X != "",c(1,2,4,5)])
tail(gdp2 <- gdp[gdp$X != "",c(1,2,4,5)])
gdp2 <- gdp[gdp$X != "",c(1,2,4,5)]
names(gdp2) <- c("CountryCode", "Ranking", "Economy", "US. dollars.")
tail(gdp2)
head(gdp2)
length(gdp2)
dim(gdp2)
mergedData(gdp2, educ, by.x="CountryCode", by.y = "CountryCode",all = TRUE)
mergedData<- merge(gdp2, educ, by.x="CountryCode", by.y = "CountryCode",all = TRUE)
View(mergedData)
arrange(mergedData, mergedData$Ranking)
?order
mergedData[order(mergedData$Ranking),][13]
mergedData[order(mergedData$Ranking),list("CountryCode", "Ranking")][13]
mergedData[order(mergedData$Ranking),list(CountryCode, Ranking)][13]
mergedData[order(mergedData$Ranking),names(mergedData) == "CountryCode"][13]
sum(!is.na(unique(gdp2$Ranking)))
names(mergedData)
mergedData[order(mergedData$Ranking), c(1,2,3)]
mergedData$Ranking <- as.numeric(mergedData$Ranking)
mergedData[order(mergedData$Ranking), c(1,2,3)]
mergedData[order(mergedData$Ranking), c(1,2,3,4)]
head(gdp2)
tail(gdp2)
tail(gdp2[gdp2$Ranking!="",])
tail(gdp[gdp$X != "" & gdp[gdp$X.1 != ""],c(1,2,4,5)])
tail(gdp[gdp$X != "" & gdp$X.1 != "",c(1,2,4,5)])
gdp2 <- gdp[gdp$X != "" & gdp$X.1 != "",c(1,2,4,5)]
mergeData <- merge(gdp2, educ, by=c("CountryCode"), all = TRUE)
?merge
mergeData <- merge(gdp2, educ, by.x = "CountrCode", all = TRUE)
mergeData <- merge(gdp2, educ, by.x = "CountryCode", all = TRUE)
names(gdp2) <- c("CountryCode", "Ranking", "Economy", "US. dollars.")
mergeData <- merge(gdp2, educ, by=c("CountryCode"), all = TRUE)
sum(!is.na(unique(mergeData$Ranking))
sum(!is.na(unique(mergeData$Ranking)))
mergeData[order(Ranking, descending = TRUE), list(CountryCode, Ranking, US. dollars)]
head(mergeData[order(Ranking, descending = TRUE), c(1,2,4,5)])
head(mergeData[order(mergeData$Ranking, descending = TRUE), c(1,2,4,5)])
mergedData <- mergeData[,c(1,2,4,5)]
mergedData[order(mergedData$Ranking, descending = T)]
mergedData[order(mergedData$Ranking, descending = T),]
View(mergedData)
arrange(mergedData, Ranking)
mergedData$Ranking <- as.numeric(mergedData$Ranking)
head(arrange(mergedData, Ranking), n=14)
mergeData[order(Ranking, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
mergeData <- merge(gdp2, educ, all = TRUE, by = c(CountryCode))
mergeData <- merge(gdp2, educ, all = TRUE, by = c("CountryCode"))
View(educ)
View(mergeData)
mergeData[order(mergeData$Ranking, descending = TRUE), list(CountryCode, Economy, Long.Name, Ranking, US. dollars.)]
setnames(gdp2, c("CountryCode", "Ranking", "Economy", "US. dollars."), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
names(gdp2) <- c("CountryCode", "rankingGDP", "Long.Name", "gdp")
mergeData[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
mergeData <- merge(gdp2, educ, all = TRUE, by = c(CountryCode))
mergeData <- merge(gdp2, educ, all = TRUE, by = c("CountryCode"))
mergeData[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
mergeData[order(rankingGDP, decreasing = TRUE), c(1,2,3,4,5)][13]
mergeData[order(mergeData$rankingGDP, decreasing = TRUE), c(1,2,3,4,5)][13]
View(mergeData)
sum(!is.na(mergeData$Ranking))
sum(!is.na(mergeData))
sum(!is.na(mergeData$rankingGDP))
sum(!is.na(unique(mergeData$rankingGDP))
sum(!is.na(unique(mergeData$rankingGDP)))
head(mergeData[!is.na(unique(mergeData$rankingGDP)),])
goodMergeData <- mergeData[!is.na(unique(mergeData$rankingGDP)),])
goodMergeData <- mergeData[!is.na(unique(mergeData$rankingGDP)),]
View(goodMergeData)
head(rowSums(is.na(data)) == 0)
head(rowSums(is.na(mergeData)) == 0)
goodMergeData <- mergeData[!is.na(unique(mergeData$rankingGDP)),]
View(goodMergeData)
goodMergeData <- mergeData[!is.na(unique(mergeData)),]
goodMergeData <- mergeData[!is.na(mergeData$rankingGDP),]
View(goodMergeData)
goodMergeData <- mergeData[!is.na(unique(mergeData$rankingGDP),]
goodMergeData <- mergeData[!is.na(unique(mergeData$rankingGDP)),]
goodMergeData <- mergeData[!is.na(mergeData$rankingGDP),]
rowSums(is.na(mergeData))
goodMergeData <- mergeData[rowSums(is.na(mergeData)==0),]
View(goodMergeData)
goodMergeData <- mergeData[!is.na(mergeData$rankingGDP),]
View(goodMergeData)
!(1:190 %in% rank)
!(1:190 %in% rankingGDP)
!(1:190 %in% goodMergedData$rankingGDP)
!(1:190 %in% goodMergeData$rankingGDP)
tables(goodMergeData)
table(goodMergeData)
table(goodMergeData$rankingGDP)
table(goodMergeData$rankingGDP, useNA="ifany")
duplicated(goodMergeData$rankingGDP)
goodMergeData[goodMergeData$CountryCode == 85,]
goodMergeData[duplicated(goodMergeData$rankingGDP),]
goodMergeData[duplicated(goodMergeData$rankingGDP),c(1,2,3,4,5)]
levels(goodMergeData$rankingGDP)
arrange(goodMergeData, goodMergeData$rankingGDP)
?arrange
?read.csv
gdp <- read.csv("gdp.csv", skip = 4, stringsAsFactors = FALSE)
gdp2 <- gdp[gdp$X != "" & gdp$X.1 != "",c(1,2,4,5)]
names(gdp2) <- c("CountryCode", "rankingGDP", "Long.Name", "gdp")
gdp2$rankingGDP <- as.integer(gdp2$rankingGDP)
mergeData <- merge(gdp2, educ, all = TRUE, by = c("CountryCode"))
good <- which(mergeData$rankingGDP == "")
good <- which(mergeData$rankingGDP == " ")
View(mergeData)
good <- which(is.na(mergeData$rankingGDP)
good <- which(is.na(mergeData$rankingGDP))
?which
head(good)
goodMergeData <- mergeData[good,]
View(goodMergeData)
good <- which(!is.na(mergeData$rankingGDP))
goodMergeData <- mergeData[good,]
View(goodMergeData)
arrange(goodMergeData, goodMergeData$rankingGDP)
?dcast
?arrange
goodMergeData[order(goodMergeData$rankingGDP, descending= TRUE),]
?order
goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE),]
goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE), c(1,2,3,4,5)]
goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE), c(1,2,3,4)][13]
goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE), c(1,2,3,4)]
arrangeData <- goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE), c(1,2,3,4)]
arrageData[13]
arrageData[13,]
arrangeData[13,]
arrangeData[13]
arrangeData <- goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE), c(1,2,3,4)][13,]
arrangeData <- goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE), c(1,2,3,4)]
goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE), c(1,2,3,4)][13,]
sum(!is.na(unique(goodMergeData$rankingGDP)))
?tapply
tapply(goodMergeData$rankingGDP, goodMergeData$Income.Group, mean)
tapply(goodMergeData$rankingGDP[good], goodMergeData$Income.Group, mean)
tapply(goodMergeData$rankingGDP[good], goodMergeData$Income.Group, mean(goodMergeData$rankingGDP, na.rm = TRUE))
goodMergeData[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
class(goodMergeData)
dt <- data.table(goodMergeData)
library(data.table)
dt <- data.table(goodMergeData)
class(dt)
dt[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
tapply(goodMergeData$rankingGDP, goodMergeData$Income.Group, mean)
tapply(goodMergeData$rankingGDP, goodMergeData$Income.Group, mean)[2]
tapply(goodMergeData$rankingGDP, goodMergeData$Income.Group, mean)["High income: nonOECD"]
tapply(goodMergeData$rankingGDP, goodMergeData$Income.Group, mean)["High income: OECD"]
quantile(goodMergeData$rankingGDP, g=5
quantile(goodMergeData$rankingGDP, g=5)
seq(0, 1, 0.2)
?quantile
quant <- quantile(goodMergeData$rankingGDP, probs = seq(0,1,0.2), na.rm = TRUE)
?cut
?cut2
cut2(goodMergeData$rankingGDP, quant)
cut(goodMergeData$rankingGDP, quant)
table(goodMergeData$quant, goodMergeData$Income.Group)
table(goodMergeData$Income.Group, goodMergeData$quant)
goodMergeData$quant <- cut(goodMergeData$rankingGDP, quant)
table(goodMergeData$Income.Group, goodMergeData$quant)
duplicated(goodMergeData$rankingGDP)
View(goodMergeData)
goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE), c(1,2,3,4)][90:95,]
goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE), c(1,2,3,4)][duplicated(goodMergeData$rankingGDP),]
goodMergeData[order(goodMergeData$rankingGDP, decreasing= TRUE), c(1,2,3,4)][10:15,]
goodMergeData[order(goodMergeData$rankingGDP, decreasing= false), c(1,2,3,4)][duplicated(goodMergeData$rankingGDP),]
goodMergeData[order(goodMergeData$rankingGDP), c(1,2,3,4)][10:15,]
goodMergeData[order(goodMergeData$rankingGDP), c(1,2,3,4)][duplicated(goodMergeData$rankingGDP),]
goodMergeData[, c(1,2,3,4)][duplicated(goodMergeData$rankingGDP),]
install.packages("stringr")
install.packages("stringr")
library(stringr)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, destfile = "./acs.csv")
raw <- read.csv("acs.csv")
head(raw$WGTP)
class(raw$WGTP)
?strsplit
names(raw)
strsplit(names(raw), "wgtp")
strsplit(names(raw), "wgtp")[123]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
file <- file.path(getwd(), "gdp190.csv")
download.file(url, file)
raw <- read.csv("gdp190.csv")
names(raw)
head(raw)
raw <- read.csv("gdp190.csv", skip=4, stringsAsFactors = FALSE)
names(raw)
head(raw)
gdp <- raw[,c(1,2,4,5)]
head(gdp)
names(gdp) <- c("CountryCode", "Ranking", "LongName", "GDP")
gdp$GDP <- as.integer(gdp$GDP
gdp$GDP <- as.integer(gdp$GDP)
raw <- read.csv("gdp190.csv", skip=4, stringsAsFactors = FALSE)
gdp <- raw[,c(1,2,4,5)]
names(gdp) <- c("CountryCode", "Ranking", "LongName", "GDP")
head(strsplit(gdp$GDP, ","))
head(unlist(strsplit(gdp$GDP, ",")))
head(strsplit(gdp$GDP, ","))
head(apply(strsplit(gdp$GDP, ","), paste))
?apply
?lapply
head(lapply(strsplit(gdp$GDP, ","), paste))
head(strsplit(gdp$GDP, ",", collapase=""))
head(strsplit(gdp$GDP, ",", collapse=""))
head(strsplit(gdp$GDP, ",", collapse=" "))
sapply(strsplit(gdp$GDP, ","), paste, collapse="")
sapply(sapply(strsplit(gdp$GDP, ","), paste, collapse=""), str_trim)
good <- which(!is.na(gdp$Ranking))
View(gdp)
good <- gdp$CountryCode != "" & gdp$Ranking != ""
tail(gdp[good,])
gdp <- gdp[good, ]
sapply(sapply(strsplit(gdp$GDP, ","), paste, collapse=""), str_trim)
?str_trim
class(sapply(sapply(strsplit(gdp$GDP, ","), paste, collapse=""), str_trim))
gdpValue <- sapply(sapply(strsplit(gdp$GDP, ","), paste, collapse=""), str_trim)
head(gdpValue)
head(gsub(",", "",gdp$GDP))
head(as.numeric(gsub(",", "",gdp$GDP)))
gdpValue <- as.numeric(gsub(",", "",gdp$GDP))
mean(gdpValue)
grep("^United", gdp$LongName)
grep("^United", gdp$LongName, value = T)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
file <- file.path(getwd(), "gdp190.csv")
download.file(url, file)
raw <- read.csv("gdpq4q4.csv", skip=4, stringsAsFactors = FALSE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
file <- file.path(getwd(), "gdpq4q4.csv")
download.file(url, file)
raw <- read.csv("gdpq4q4.csv", skip=4, stringsAsFactors = FALSE)
url1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
file1 <- file.path(getwd(), "gdpq4q4.csv")
download.file(url1, file1)
raw1 <- read.csv("gdpq4q4.csv", skip=4, stringsAsFactors = FALSE)
url2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
file2 <- file.path(getwd(), "educq4q4.csv")
download.file(url2, file2)
raw2 <- read.csv("educq4q4.csv", skip=4, stringsAsFactors = FALSE)
gdp <- raw1[,c(1,2,4,5)]
educ <- raw2
str(educ)
str(gdp)
names(gdp) <- c("CountryCode", "Ranking", "LongName", "GDP")
good <- gdp$CountryCode != "" & gdp$Ranking != ""
gdp <- gdp[good, ]
str(gdp)
View(educ)
educ <- read.csv("educq4q4.csv")
str(educ)
View(educ)
gdp <- raw1[,c(1,2,4,5)]
names(gdp) <- c("CountryCode", "Ranking", "LongName", "GDP")
mergeData <- merge(gdp, educ, by=c("CountryCode", all = TRUE))
gdp <- raw1[,c(1,2,4,5)]
names(gdp) <- c("CountryCode", "Ranking", "LongName", "GDP")
mergeData <- merge(gdp, educ, by=c("CountryCode"), all = TRUE))
gdp <- raw1[,c(1,2,4,5)]
names(gdp) <- c("CountryCode", "Ranking", "LongName", "GDP")
mergeData <- merge(gdp, educ, by=c("CountryCode"), all = TRUE)
educ[educ$Special.Notes != "",]
head(educ[educ$Special.Notes != "", c(1,2,10)])
length(educ[educ$Special.Notes != "", c(1,2,10)])
dim(educ[educ$Special.Notes != "", c(1,2,10)])
nrow(educ[educ$Special.Notes != "", c(1,2,10)])
educ <- educ[educ$Special.Notes != "", c(1,2,10)]
mergeData <- merge(gdp, educ, by=c("CountryCode"), all = TRUE)
nrow(mergeData[mergeData$Special.Notes != "",])
View(gdp)
View(mergeData)
nrow(mergeData[!is.na(mergeData$Special.Notes),])
mergeData <- mergeData[!is.na(mergeData$Special.Notes),]
?gsub
View(mergeData)
grep("[Ff]iscal [Yy]ear [Ee]nd: [Jj]une", mergeData$SpecialNotes)
grep("[Ff]iscal.[Yy]ear.[Ee]nd\:.[Jj]une", mergeData$SpecialNotes)
grep("fiscal year end", tolower(mergeData$SpecialNotes))
grepl("fiscal year end", tolower(mergeData$SpecialNotes))
grep("fiscal year end", tolower(mergeData$Special.Notes))
grep("fiscal year end\:", tolower(mergeData$Special.Notes))
grep("fiscal year end. june", tolower(mergeData$Special.Notes))
grep("fiscal year end. june", tolower(mergeData$Special.Notes), value = T)
length(grep("fiscal year end. june", tolower(mergeData$Special.Notes)))
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
str(sampleTimes)
grep("^2012", samplesTimes)
grep("^2012", sampleTimes)
head(grep("^2012", sampleTimes, value = T))
class(grep("^2012", sampleTimes, value = T))
?ymd
library(date)
library(lubridate)
?ymd
ymd("2012-01-03")
charDates <- grep("^2012", sampleTimes, value = T)
length(grep("^2012", sampleTimes, value = T))
head(ymd(charDates))
head(as.Date(charDates))
char(as.Date(charDates))
class(as.Date(charDates))
class(ymd("2012-01-03"))
realDate <- as.Date(charDates)
head(realDate)
head(weekdays(realDate))
realDates[weekdays(realDates) == "Monday",]
realDate[weekdays(realDate) == "Monday",]
realDate[weekdays(realDate) == "Monday"]
length(realDate[weekdays(realDate) == "Monday"])
ymdDates <- ymd(charDates)
head(weekdays(charDates))
head(wday(charDates))
?wday
head(charDates)
?sundays
install.package("twitteR")
install.packages("twitteR")
install.packages("rfigshare")
install.packages("rplos")
install.packages("rOpenSci")
install.packages("RFacebook")
install.packages("RGoogleMaps")
install.packages("RgoogleMaps")
install.packages("Rfacebook")
setwd(C:/Users/jonovin/Desktop/Coursera Data Science/R Programming)
setwd("C:/Users/jonovin/Desktop/Coursera Data Science/R Programming")
list.files()
source("makeVector.R")
source("makeVector.R")
x<- 1:10000
vec <- makeVector(x)
vec
source("makeVector.R")
x<- 1:10000
vec <- makeVector(x)
source("makeVector.R")
x<- 1:10000
> vec <- makeVector(x)
source("makeVector.R")
x<- 1:10000vec <- makeVector(x)
vec <- makeVector(x)
vec
vec$getmean()
vec$getevn()
vec$getevn
mx <- mean(x)
vec$setmean(mx)
vec$getmean()
vec$getevn()
ls(vec$getevn())
parent.env(vec$getevn())
ls(parent.env(vec$getevn()))
ls(parent.env(vec$getevn()))$m
ls(parent.env(vec$getevn()))$m
parent.env(vec$getevn())$m
x <- 1:10000
vec <- makeVector(x)
vec$getmean()
vec$get()
mean(x,...)
mean(x)
x$setmean(m)
x$setmean(mean(x))
vec$setmean(m)
vec <- makeVector(x)
vec$getmean()
vec$get()
mean(vec)
mean(vec,...)
mx <- mean(vec)
mx <- mean(x)
vec$get()
mean(x)
vec$setmean(mean(x))
mean(x)
vec$getmean
vec$getmean()
parent.env(vec$getevn())
parent.env(parent.env(vec$getevn()))
## R Programming
## Programming Assignment 2: Caching the Inverse of a Matrix
## by Joanna Widjaja (jo.widjaja@gmail.com)
## Jan 18, 2015
## These 2 functions
## functions do
## makeCacheMatrix is a function that creates a special "matrix" object
## that can cache its inverse..
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setcache <- function(cache) m <<- cache
getcache <- function() m
list(set = set, get = get,
setcache = setcache,
getcache = getcache)
}
## cacheSolve is a function that computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then the cachesolve should retrieve the inverse
## from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getcache()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setcache(m)
m
}
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
for (i in 1:1000) {
x__ <- cacheSolve(x_)
}
x__
x <- matrix(rnorm(160000),400,400)
for (i in 1:1000) {
x_ <- solve(x)
}
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
cacheSolve(x_)
print(identical(x_$getInv(),solve(x)))
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
cacheSolve(x_)
print(identical(x__$getInv(),solve(x)))
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
cacheSolve(x_)
print(identical(x_$getInv(),solve(x)))
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
x__ <- cacheSolve(x_)
print(identical(x__,solve(x)))
?Sys.time
?Sys.time(x_ <- makeCacheMatrix(x);
x__ <- cacheSolve(x_))
Sys.time(x_ <- makeCacheMatrix(x);
x__ <- cacheSolve(x_))
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
x__ <- cacheSolve(x_)
print(identical(x__,solve(x)))
Sys.time(cacheSolve(x_))
Sys.time(solve(x))
Sys.time()
unlist(strsplit(getwd()))
?strsplit
unlist(strsplit(getwd()), split="/")
unlist(strsplit(getwd()), split='/', fixed = TRUE)
s <- getwd()
s1 <- unlist(strsplit(s, split = '/', fixed = TRUE))
# Combine s1 without the last argument. Collapse instead of Sep.
s2 <- paste(s1[-(length(s1))], collapse = '/')
s3 <- paste(s2, "Getting and Cleaning Data", sep="/")
s3
setwd(s3)
list.files()
s3
setwd("C:/Users/jonovin/Desktop/Coursera Data Science/Getting and Cleaning Data/"UCI HAR Dataset)
setwd("C:/Users/jonovin/Desktop/Coursera Data Science/Getting and Cleaning Data/"UCI HAR Dataset"")
setwd("C:/Users/jonovin/Desktop/Coursera Data Science/Getting and Cleaning Data/UCI HAR Dataset")
list.files()
raw <- read.table("test")
setwd("C:/Users/jonovin/Desktop/Coursera Data Science/Getting and Cleaning Data/UCI HAR Dataset/test")
list.files()
raw <- read.table("X_test.txt")
subtestraw <- read.table("subject_test.txt")
subtestraw
str(subtestraw)
ddict <- names(raw)
head(ddict)
getwd()
setwd("C:/Users/jonovin/Desktop/Coursera Data Science/Getting and Cleaning Data/UCI HAR Dataset")
feat <-read.table("features")
list.files()
feat <-read.table("features.txt")
head(feat)
tail(feat)
feat[,50:55]
feat[50:55,]
